{"version":3,"file":"mixpad.component.js","sourceRoot":"","sources":["../../../Users/gusdev/code/rumpel/tmp/broccoli_type_script_compiler-input_base_path-f2J48Fb3.tmp/0/src/app/dataViews/mixpad/mixpad.component.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAAkC,eAAe,CAAC,CAAA;AAClD,iCAAuC,2BAA2B,CAAC,CAAA;AACnE,8BAA6B,sBAAsB,CAAC,CAAA;AACpD,mCAAkC,gCAAgC,CAAC,CAAA;AACnE,sCAAmC,sCAAsC,CAAC,CAAA;AAC1E,yBAA+D,gBAAgB,CAAC,CAAA;AAChF,oCAA6B,iCAAiC,CAAC,CAAA;AAC/D,IAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AAUjC;IAYE,yBAAoB,YAA8B,EAC9B,SAAwB,EACxB,SAAwB,EACxB,SAAiC;QAHjC,iBAAY,GAAZ,YAAY,CAAkB;QAC9B,cAAS,GAAT,SAAS,CAAe;QACxB,cAAS,GAAT,SAAS,CAAe;QACxB,cAAS,GAAT,SAAS,CAAwB;QACnD,IAAI,CAAC,QAAQ,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC;QAC3B,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,eAAe,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;IACnF,CAAC;IAED,kCAAQ,GAAR;QAAA,iBA8BC;QA7BC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,SAAS,CACrD,UAAA,SAAS;YACP,KAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC7B,CAAC,CACF,CAAC;QAEF,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,SAAS,CAChD,UAAA,MAAM;YACJ;gBACE,IAAM,QAAQ,GAAG,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,MAAM,CAAC,OAAK,CAAC,KAAK,EAAE,KAAK,CAAC,EAA9B,CAA8B,CAAC,CAAC;gBAC3E,EAAE,CAAC,CAAC,QAAQ,CAAC;oBAAC,kBAAS;gBACvB,KAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAK,CAAC,KAAK,CAAC,CAAC;;YAHlC,GAAG,CAAC,CAAc,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM,CAAC;gBAApB,IAAI,OAAK,eAAA;;;aAIb;YAED,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACvB,CAAC,CACF,CAAC;QAEF,6DAA6D;QAC7D,8BAA8B;QAC9B,gFAAgF;QAChF,8BAA8B;QAC9B,qCAAqC;QACrC,MAAM;QACN,0BAA0B;QAC1B,MAAM;QAEN,4BAA4B;QAC5B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC;IAClE,CAAC;IAED,qCAAW,GAAX;QACE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IAC3B,CAAC;IAhEH;QAAC,gBAAS,CAAC;YACT,QAAQ,EAAE,MAAM,CAAC,EAAE;YACnB,QAAQ,EAAE,aAAa;YACvB,WAAW,EAAE,uBAAuB;YACpC,SAAS,EAAE,CAAC,sBAAsB,CAAC;YACnC,UAAU,EAAE,CAAC,4BAAY,EAAE,sCAAiB,EAAE,0CAAkB,CAAC;YACjE,KAAK,EAAE,CAAC,kCAAY,CAAC;SACtB,CAAC;;uBAAA;IA2DF,sBAAC;AAAD,CAAC,AA1DD,IA0DC;AA1DY,uBAAe,kBA0D3B,CAAA","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { DomSanitizationService } from '@angular/platform-browser';\nimport { MapComponent } from '../map/map.component';\nimport { TimelineComponent } from '../timeline/timeline.component';\nimport { ViewByDayComponent } from '../view-by-day/view-by-day.component';\nimport { EventsService, LocationsService, ImagesService } from '../../services';\nimport { FilterByTime } from '../../pipes/filter-by-time.pipe';\nimport * as moment from 'moment';\n\n@Component({\n  moduleId: module.id,\n  selector: 'rump-mixpad',\n  templateUrl: 'mixpad.component.html',\n  styleUrls: ['mixpad.component.css'],\n  directives: [MapComponent, TimelineComponent, ViewByDayComponent],\n  pipes: [FilterByTime]\n})\nexport class MixpadComponent implements OnInit {\n  private eventSub;\n  private imgSub;\n  public selectedTime: any;\n  public shownComponents: any;\n  public locations$;\n  public events;\n  public images;\n  public locations;\n  public safeSize;\n  public timeline: Array<any>;\n\n  constructor(private locationsSvc: LocationsService,\n              private eventsSvc: EventsService,\n              private imagesSvc: ImagesService,\n              private sanitizer: DomSanitizationService) {\n    this.timeline = [moment()];\n    this.events = [];\n    this.images = [];\n    this.shownComponents = { map: true, events: true, photos: true, timeline: true };\n  }\n\n  ngOnInit() {\n    this.locations$ = this.locationsSvc.showAll().subscribe(\n      locations => {\n        this.locations = locations;\n      }\n    );\n\n    this.eventSub = this.eventsSvc.showAll().subscribe(\n      events => {\n        for (let event of events) {\n          const dayFound = this.timeline.find(day => day.isSame(event.start, 'day'));\n          if (dayFound) continue;\n          this.timeline.push(event.start);\n        }\n\n        this.events = events;\n      }\n    );\n\n    // this.imgSub = this.imagesSvc.images$.subscribe(images => {\n    //   for (let img of images) {\n    //     const dayFound = this.timeline.find(day => day.isSame(img.start, 'day'));\n    //     if (dayFound) continue;\n    //     this.timeline.push(img.start);\n    //   }\n    //   this.images = images;\n    // });\n\n    // this.imagesSvc.loadAll();\n    this.safeSize = this.sanitizer.bypassSecurityTrustStyle('85vh');\n  }\n\n  onViewReset() {\n    this.selectedTime = null;\n  }\n\n}\n"]}