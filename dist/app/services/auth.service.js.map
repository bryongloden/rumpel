{"version":3,"file":"auth.service.js","sourceRoot":"","sources":["../../Users/gusdev/code/rumpel/tmp/broccoli_type_script_compiler-input_base_path-f2J48Fb3.tmp/0/src/app/services/auth.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { JwtHelper } from 'angular2-jwt';\nimport { Observable, Observer } from 'rxjs/Rx';\nimport { HatApiService } from './hat-api.service';\n\n@Injectable()\nexport class AuthService {\n  public auth$: Observable<any>;\n  private authObserver: Observer<any>;\n  private authenticated: boolean;\n  private jwtHelper: JwtHelper;\n  private hatDomain: string;\n\n  constructor(private hat: HatApiService, private router: Router) {\n    this.auth$ = new Observable(observer => this.authObserver = observer).share();\n    this.authenticated = false;\n    this.jwtHelper = new JwtHelper();\n  }\n\n  decodeJwt(jwt: string): string {\n    const jwtData = this.jwtHelper.decodeToken(jwt);\n    const issuer = jwtData['iss'];\n    return issuer;\n  }\n\n  tryPreviousToken() {\n    const storedToken = localStorage.getItem('hatat');\n\n    if (storedToken && (!this.jwtHelper.isTokenExpired(storedToken))) {\n      this.router.navigate(['users/authenticate/' + storedToken]);\n    } else {\n      this.router.navigate(['users/login']);\n    }\n  }\n\n  authenticate(jwt: string) {\n    const hatDomain = this.decodeJwt(jwt);\n    this.hatDomain = hatDomain;\n\n    this.hat.validateToken(hatDomain, jwt).subscribe(\n      res => {\n        if (res && res.message === 'Authenticated') {\n          this.authenticated = true;\n          localStorage.setItem('hatat', jwt);\n        } else {\n          this.authenticated = false;\n          localStorage.removeItem('hatat');\n        }\n      },\n      err => {\n        this.authenticated = false;\n        console.log(\"Could not verify with specified HAT\");\n        this.authObserver.next(this.authenticated);\n      },\n      () => {\n        if (this.authObserver) this.authObserver.next(this.authenticated);\n      });\n  }\n\n  isAuthenticated(): boolean {\n    return this.authenticated;\n  }\n\n  getDomain(): string {\n    return this.hatDomain;\n  }\n\n  /* Local Storage placeholders */\n\n  // static getCookie(name: string): string {\n  //   return localStorage.getItem(name);\n  // }\n\n  // static setCookie(name: string, value: string) {\n  //   localStorage.setItem(name, value);\n  // }\n\n}\n"]}