{"version":3,"file":"hat-api.service.js","sourceRoot":"","sources":["../../Users/gusdev/code/rumpel/tmp/broccoli_type_script_compiler-input_base_path-f2J48Fb3.tmp/0/src/app/services/hat-api.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Headers, URLSearchParams } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\n\nconst HAT_PORT = 8080;\n\n@Injectable()\nexport class HatApiService {\n  private _token: string;\n  private _baseUrl: string;\n  private _headers: Headers;\n\n  constructor(private _http: Http) {}\n\n  getUrl() {\n    return this._baseUrl;\n  }\n\n  updateCredentials(domain: string, token: string) {\n    this._baseUrl = 'http://' + domain + ':' + HAT_PORT;\n    this._token = token;\n    this._headers = new Headers();\n    this._headers.append('Content-Type', 'application/json');\n    this._headers.append('X-Auth-Token', this._token);\n  }\n\n  validateToken(domain: string, token: string) {\n    this.updateCredentials(domain, token);\n\n    const url = this._baseUrl + '/users/access_token/validate';\n\n    return this._http.get(url, { headers: this._headers }).map(res => res.json());\n  }\n\n  getDataSources(): Observable<any> {\n    const url = this._baseUrl + '/data/sources';\n\n    return this._http.get(url, { headers: this._headers });\n  }\n\n  getAllValuesOf(name: string, source: string): Observable<any> {\n    return this.getTable(name, source)\n      .flatMap(table => this.getValues(table.id));\n  }\n\n  getTable(name: string, source: string): Observable<any> {\n    const url = this._baseUrl + '/data/table';\n    let query: URLSearchParams = new URLSearchParams();\n    query.append('name', name);\n    query.append('source', source);\n\n    console.log('Getting table values: ', name, source);\n\n    return this._http.get(url, { headers: this._headers, search: query })\n      .map(res => res.json());\n  }\n\n  getModel(tableId: number): Observable<any> {\n    const url = this._baseUrl + '/data/table/' + tableId;\n\n    return this._http.get(url, { headers: this._headers })\n      .map(res => res.json());\n  }\n\n  getModelMapping(tableId: number): Observable<any> {\n    return this.getModel(tableId)\n      .map(rawModel => this.mapDataSource(rawModel, rawModel.name));\n  }\n\n  postModel(model: any): Observable<any> {\n    const url = this._baseUrl + '/data/table';\n\n    return this._http.post(url, model, { headers: this._headers })\n      .map(res => res.json())\n      .map(rawModel => this.mapDataSource(rawModel, rawModel.name));\n  }\n\n  postRecord(obj: any, hatIdMapping: any, prefix: string = 'default'): Observable<any> {\n    const url = this._baseUrl + '/data/record/values';\n    const hatFormattedObj = this.createRecord(obj, hatIdMapping, prefix);\n\n    return this._http.post(url, hatFormattedObj, { headers: this._headers });\n  }\n\n  getValues(tableId: number): Observable<any> {\n    const url = this._baseUrl + '/data/table/' + tableId + '/values';\n\n    return this._http.get(url, { headers: this._headers })\n      .map(res => res.json())\n      .map(body => this.transform(body));\n  }\n\n  getDataDebit(uuid: string) {\n    const url = this._baseUrl + '/dataDebit/' + uuid + '/values';\n    return this._http.get(url, { headers: this._headers })\n      .map(res => res.json());\n  }\n\n  updateDataDebit(uuid: string, state: string): Observable<any> {\n    const url = this._baseUrl + '/directDebit/' + uuid + '/' + state;\n\n    return this._http.put(url, {}, { headers: this._headers });\n  }\n\n  private createRecord(obj: any, hatIdMapping: any, prefix: string) {\n    if (Array.isArray(obj)) {\n      return obj.map(record => {\n        return {\n          record: { name: new Date() },\n          values: this.createValue(record, hatIdMapping, prefix)\n        }\n      });\n    } else {\n      return [{\n        record: { name: new Date() },\n        values: this.createValue(obj, hatIdMapping, prefix)\n      }]\n    }\n  }\n\n  private createValue(obj: any, hatIdMapping: any, prefix: string = 'default') {\n    return Object.keys(obj).reduce((acc, key) => {\n      if (typeof obj[key] === 'object') {\n        const subTreeValues = this.createValue(obj[key], hatIdMapping, prefix + '_' + key);\n        acc = acc.concat(subTreeValues);\n      } else {\n        acc.push({\n          value: '' + obj[key],\n          field: {\n            id: hatIdMapping[prefix + '_' + key],\n            name: key\n          }\n        });\n      }\n\n      return acc;\n    }, []);\n  }\n\n  private mapDataSource(table: any, prefix: string = 'default') {\n    var mapping = {};\n\n    table.fields.reduce((acc, field) => {\n      acc[prefix + '_' + field.name] = field.id;\n      return acc;\n    }, mapping);\n\n    if (table.subTables) {\n      const mappedSubTables = table.subTables.reduce((acc, table) => {\n        const mappedTable = this.mapDataSource(table, prefix + '_' + table.name);\n        Object.assign(acc, mappedTable);\n        return acc;\n      }, mapping);\n    }\n\n    return mapping;\n  }\n\n  private transform(raw: Array<any>) {\n    return raw.map((record) => {\n      return this.processNode(record.tables[0]);\n    });\n  }\n\n  private processNode(node) {\n    var values = {};\n    node.fields.reduce((acc, field) => {\n      if (field.values) {\n        acc[field.name] = field.values[0].value;\n      } else {\n        acc[field.name] = null;\n      }\n      return acc;\n    }, values);\n\n    if (node.subTables) {\n      node.subTables.reduce((acc, table) => {\n        acc[table.name] = this.processNode(table);\n\n        return acc;\n      }, values);\n    }\n\n    return values;\n  }\n}\n"]}