{"version":3,"file":"images.service.js","sourceRoot":"","sources":["../../Users/gusdev/code/rumpel/tmp/broccoli_type_script_compiler-input_base_path-f2J48Fb3.tmp/0/src/app/services/images.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { Observable, Observer } from 'rxjs/Rx';\n\nimport { HatApiService } from './hat-api.service';\nimport { Image } from '../shared/index';\nimport * as moment from 'moment';\n\n@Injectable()\nexport class ImagesService {\n  dropbox$: Observable<any>;\n  images$: Observable<any>;\n  private _imagesObserver: Observer<any>;\n  private _dropboxObserver: Observer<any>;\n  private _authBearer: string = \"Bearer Ntiog9K4PcsAAAAAAAAFwpbDzzEsJTTSl_ot1nMF4jjY-kxuKmzhwCk_qaeQ6CnN\"\n  private _dataLoaded: boolean;\n  private _store: { images: Array<Image> };\n\n  constructor(private _http: Http,\n              private _hat: HatApiService) {\n    this._dataLoaded = false;\n    this._store = { images: [] };\n    this.images$ = new Observable(observer => this._imagesObserver = observer).share();\n    this.dropbox$ = new Observable(observer => this._dropboxObserver = observer).share();\n  }\n\n  loadAll() {\n    if (this._dataLoaded) return Observable.of(this._store.images);\n\n    this._hat.getAllValuesOf('photos', 'dropbox')\n      .map(data => data.map(this.imgMap))\n      .subscribe((newImages: Array<Image>) => {\n        this._dataLoaded = true;\n        this._store.images = newImages;\n        this.downloadImages();\n      }, err => console.log('There was an error loading images from HAT', err));\n  }\n\n  imgMap(image) {\n    return {\n      source: image.path_lower,\n      url: null,\n      start: image.media_info.metadata.time_taken\n    };\n  }\n\n  downloadImages() {\n    let boundDownload = this.downloadThumbnail.bind(this);\n    this._store.images.forEach((image) => {\n      boundDownload(image, 'w640h480');\n    });\n  }\n\n  downloadThumbnail(image, size = \"w128h128\") {\n    var dropboxApiArg = `{\"path\":\"${image.source}\",\"size\":{\".tag\":\"${size}\"}}`;\n\n    var xhr = new XMLHttpRequest()\n\n    var decoder = this.base64ArrayBuffer.bind(this);\n    var obs = this._imagesObserver;\n\n    xhr.open(\"GET\", \"https://content.dropboxapi.com/2/files/get_thumbnail\", true); // method, url, async\n    xhr.responseType = 'arraybuffer';\n    xhr.setRequestHeader(\"Authorization\", this._authBearer);\n    xhr.setRequestHeader('Dropbox-API-Arg', dropboxApiArg);\n\n    xhr.onreadystatechange = function(e) {\n      if (xhr.readyState == 4) {\n        // Construct a response object similar to a regular $http call\n        //\n        // data – {string|Object} – The response body transformed with the transform functions.\n        // status – {number} – HTTP status code of the response.\n        // headers – {function([headerName])} – Header getter function.\n        // config – {Object} – The configuration object that was used to generate the request.\n        var r = {\n          data: { path: image.source, content: 'data: image/jpg;base64,' + decoder(xhr.response) },\n          status: xhr.status,\n          headers: xhr.getResponseHeader,\n          config: {}\n        };\n\n        image.url = r.data.content;\n        obs.next(image);\n      }\n    };\n\n    // This is only available in XHR2, provide multipart fallback\n    // if necessary\n    xhr.send();\n\n    return obs;\n  }\n\n  base64ArrayBuffer(arrayBuffer) {\n    var base64 = ''\n    var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n\n    var bytes = new Uint8Array(arrayBuffer)\n    var byteLength = bytes.byteLength\n    var byteRemainder = byteLength % 3\n    var mainLength = byteLength - byteRemainder\n\n    var a, b, c, d\n    var chunk\n\n    // Main loop deals with bytes in chunks of 3\n    for (var i = 0; i < mainLength; i = i + 3) {\n      // Combine the three bytes into a single integer\n      chunk = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2]\n\n      // Use bitmasks to extract 6-bit segments from the triplet\n      a = (chunk & 16515072) >> 18 // 16515072 = (2^6 - 1) << 18\n      b = (chunk & 258048) >> 12 // 258048   = (2^6 - 1) << 12\n      c = (chunk & 4032) >> 6 // 4032     = (2^6 - 1) << 6\n      d = chunk & 63 // 63       = 2^6 - 1\n\n      // Convert the raw binary segments to the appropriate ASCII encoding\n      base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d]\n    }\n\n    // Deal with the remaining bytes and padding\n    if (byteRemainder == 1) {\n      chunk = bytes[mainLength]\n\n      a = (chunk & 252) >> 2 // 252 = (2^6 - 1) << 2\n\n      // Set the 4 least significant bits to zero\n      b = (chunk & 3) << 4 // 3   = 2^2 - 1\n\n      base64 += encodings[a] + encodings[b] + '=='\n    } else if (byteRemainder == 2) {\n      chunk = (bytes[mainLength] << 8) | bytes[mainLength + 1]\n\n      a = (chunk & 64512) >> 10 // 64512 = (2^6 - 1) << 10\n      b = (chunk & 1008) >> 4 // 1008  = (2^6 - 1) << 4\n\n      // Set the 2 least significant bits to zero\n      c = (chunk & 15) << 2 // 15    = 2^4 - 1\n\n      base64 += encodings[a] + encodings[b] + encodings[c] + '='\n    }\n\n    return base64\n  }\n}\n"]}