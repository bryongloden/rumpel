{"version":3,"file":"locations.service.js","sourceRoot":"","sources":["../../Users/gusdev/code/rumpel/tmp/broccoli_type_script_compiler-input_base_path-f2J48Fb3.tmp/0/src/app/services/locations.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,mBAAqC,SAAS,CAAC,CAAA;AAE/C,gCAA8B,mBAAmB,CAAC,CAAA;AAElD,+BAA8B,kBAAkB,CAAC,CAAA;AACjD,+BAA8B,kBAAkB,CAAC,CAAA;AACjD,IAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AAGjC;IAKE,0BAAoB,GAAkB,EAClB,UAAyB,EACzB,UAAyB;QAP/C,iBA+CC;QA1CqB,QAAG,GAAH,GAAG,CAAe;QAClB,eAAU,GAAV,UAAU,CAAe;QACzB,eAAU,GAAV,UAAU,CAAe;QAE3C,IAAI,CAAC,KAAK,GAAG,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,IAAI,eAAU,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,iBAAiB,GAAG,QAAQ,EAAjC,CAAiC,CAAC,CAAC,KAAK,EAAE,CAAC;IAC1F,CAAC;IAED,kCAAO,GAAP;QAAA,iBAcC;QAbC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACpC,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;YACnC,MAAM,CAAC,eAAU,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QAC7C,CAAC;QAED,IAAI,CAAC,OAAO,EAAE,CAAC,SAAS,CACtB,UAAA,IAAI;YACF,KAAI,CAAC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC;YAC5B,KAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACpD,CAAC,EACD,UAAA,GAAG,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC,EAAjD,CAAiD,CACzD,CAAC;QACF,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;IAED,kCAAO,GAAP;QAAA,iBAEC;QADC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,UAAA,SAAS,IAAI,OAAA,SAAS,CAAC,GAAG,CAAC,KAAI,CAAC,MAAM,CAAC,EAA1B,CAA0B,CAAC,CAAC;IAC9E,CAAC;IAED,mCAAQ,GAAR,UAAS,MAAc;QACrB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IACtD,CAAC;IAED,iCAAM,GAAN,UAAO,QAAa;QAClB,MAAM,CAAC;YACL,QAAQ,EAAE,QAAQ,CAAC,QAAQ;YAC3B,SAAS,EAAE,QAAQ,CAAC,SAAS;YAC7B,QAAQ,EAAE,IAAI;YACd,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;SAC9C,CAAC;IACJ,CAAC;IA7CH;QAAC,iBAAU,EAAE;;wBAAA;IAgDb,uBAAC;AAAD,CAAC,AA/CD,IA+CC;AA/CY,wBAAgB,mBA+C5B,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, Observer } from 'rxjs/Rx';\n\nimport { HatApiService } from './hat-api.service';\nimport { Location } from '../shared/index';\nimport { EventsService } from './events.service';\nimport { ImagesService } from './images.service';\nimport * as moment from 'moment';\n\n@Injectable()\nexport class LocationsService {\n  private locations$: Observable<any>;\n  private locationsObserver: Observer<any>;\n  private store: { locations: Array<Location> };\n\n  constructor(private hat: HatApiService,\n              private _eventsSvc: EventsService,\n              private _imagesSvc: ImagesService) {\n\n    this.store = { locations: [] };\n    this.locations$ = new Observable(observer => this.locationsObserver = observer).share();\n  }\n\n  showAll(): Observable<any> {\n    if (this.store.locations.length > 0) {\n      console.log('Inside locations if');\n      return Observable.of(this.store.locations);\n    }\n\n    this.loadAll().subscribe(\n      data => {\n        this.store.locations = data;\n        this.locationsObserver.next(this.store.locations);\n      },\n      err => console.log(`Locations table could not be found`)\n    );\n    return this.locations$;\n  }\n\n  loadAll(): Observable<any> {\n    return this.loadFrom('iphone').map(locations => locations.map(this.locMap));\n  }\n\n  loadFrom(source: string): Observable<any> {\n    return this.hat.getAllValuesOf('locations', source);\n  }\n\n  locMap(location: any): Location {\n    return {\n      latitude: location.latitude,\n      longitude: location.longitude,\n      accuracy: null,\n      start: moment(parseInt(location.timestampMs))\n    };\n  }\n\n\n}\n"]}