{"version":3,"file":"profile.service.js","sourceRoot":"","sources":["../../Users/gusdev/code/rumpel/tmp/broccoli_type_script_compiler-input_base_path-f2J48Fb3.tmp/0/src/app/services/profile.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,gCAA8B,mBAAmB,CAAC,CAAA;AAClD,6BAA4B,gBAAgB,CAAC,CAAA;AAE7C,kCAAyB,6BAA6B,CAAC,CAAA;AAGvD;IAIE,wBAAoB,GAAkB,EAClB,IAAiB;QADjB,QAAG,GAAH,GAAG,CAAe;QAClB,SAAI,GAAJ,IAAI,CAAa;IACrC,CAAC;IAED,0CAAiB,GAAjB;QAAA,iBAaC;QAZC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE;aAC7B,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aACtB,OAAO,CAAC,UAAA,OAAO;YACd,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAC5B,IAAM,YAAY,GAAG,OAAO,CAAC,IAAI,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,IAAI,KAAK,SAAS,IAAI,MAAM,CAAC,MAAM,KAAK,QAAQ,EAAvD,CAAuD,CAAC,CAAC;YAErG,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBACjB,MAAM,CAAC,KAAI,CAAC,GAAG,CAAC,eAAe,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;YACnD,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,KAAI,CAAC,GAAG,CAAC,SAAS,CAAC,4BAAQ,CAAC,OAAO,CAAC,CAAC;YAC9C,CAAC;QACH,CAAC,CAAC,CAAC;IACP,CAAC;IAED,uCAAc,GAAd;QACE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,SAAS,EAAE,QAAQ,CAAC;aAChD,GAAG,CAAC,UAAA,QAAQ;YACX,IAAM,cAAc,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;gBACxC,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,CAAC;YAC/E,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,mCAAU,GAAV;QACE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,iBAAiB,EAAE,UAAU,CAAC;aAC1D,GAAG,CAAC,UAAA,QAAQ;YACX,IAAM,cAAc,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAC,CAAC,EAAE,CAAC;gBACxC,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,OAAO,EAAE,CAAC;YAC/E,CAAC,CAAC,CAAC;YAEH,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,oCAAW,GAAX,UAAY,OAAgB,EAAE,YAAiB;QAC7C,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,OAAO,EAAE,YAAY,EAAE,SAAS,CAAC,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC,CAAC;IACtF,CAAC;IAhDH;QAAC,iBAAU,EAAE;;sBAAA;IAiDb,qBAAC;AAAD,CAAC,AAhDD,IAgDC;AAhDY,sBAAc,iBAgD1B,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HatApiService } from './hat-api.service';\nimport { AuthService } from './auth.service';\nimport { Profile } from '../shared';\nimport { hatModel } from '../shared/hat-profile-model';\n\n@Injectable()\nexport class ProfileService {\n  public profile: Profile;\n  private hatIdMapping;\n\n  constructor(private hat: HatApiService,\n              private auth: AuthService) {\n  }\n\n  initializeProfile() {\n    return this.hat.getDataSources()\n      .map(res => res.json())\n      .flatMap(sources => {\n        console.log('SRC', sources);\n        const profileTable = sources.find(source => source.name === 'profile' && source.source === 'rumpel');\n\n        if (profileTable) {\n          return this.hat.getModelMapping(profileTable.id);\n        } else {\n          return this.hat.postModel(hatModel.profile);\n        }\n      });\n  }\n\n  getFullProfile() {\n    return this.hat.getAllValuesOf('profile', 'rumpel')\n      .map(profiles => {\n        const sortedProfiles = profiles.sort((a, b) => {\n          return new Date(a.dateCreated).getTime() - new Date(b.dateCreated).getTime();\n        });\n\n        return sortedProfiles[0];\n      });\n  }\n\n  getPicture() {\n    return this.hat.getAllValuesOf('profile_picture', 'facebook')\n      .map(pictures => {\n        const sortedPictures = pictures.sort((a, b) => {\n          return new Date(a.dateCreated).getTime() - new Date(b.dateCreated).getTime();\n        });\n\n        return sortedPictures[0];\n      });\n  }\n\n  saveProfile(profile: Profile, hatIdMapping: any) {\n    return this.hat.postRecord(profile, hatIdMapping, 'profile').map(res => res.json());\n  }\n}\n"]}