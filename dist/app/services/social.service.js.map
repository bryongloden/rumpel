{"version":3,"file":"social.service.js","sourceRoot":"","sources":["../../Users/gusdev/code/rumpel/tmp/broccoli_type_script_compiler-input_base_path-f2J48Fb3.tmp/0/src/app/services/social.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,mBAAqC,SAAS,CAAC,CAAA;AAE/C,gCAA8B,mBAAmB,CAAC,CAAA;AAElD,IAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AAGjC;IAKE,uBAAoB,GAAkB;QALxC,iBA8CC;QAzCqB,QAAG,GAAH,GAAG,CAAe;QACpC,IAAI,CAAC,KAAK,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;QAC3B,IAAI,CAAC,WAAW,GAAG,IAAI,eAAU,CAAC,UAAA,QAAQ,IAAI,OAAA,KAAI,CAAC,cAAc,GAAG,QAAQ,EAA9B,CAA8B,CAAC,CAAC,KAAK,EAAE,CAAC;IACxF,CAAC;IAED,+BAAO,GAAP;QAAA,iBAcC;QAbC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YAChC,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;YAChC,MAAM,CAAC,eAAU,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACzC,CAAC;QAED,IAAI,CAAC,OAAO,EAAE,CAAC,SAAS,CACtB,UAAA,IAAI;YACF,KAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;YACxB,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAC7C,CAAC,EACD,UAAA,GAAG,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,EAA9C,CAA8C,CACtD,CAAC;QACF,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IAED,+BAAO,GAAP;QAAA,iBAEC;QADC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,GAAG,CAAC,KAAI,CAAC,KAAK,CAAC,EAArB,CAAqB,CAAC,CAAC;IACvE,CAAC;IAED,gCAAQ,GAAR,UAAS,MAAc;QACrB,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IAClD,CAAC;IAED,6BAAK,GAAL,UAAM,IAAS;QACb,MAAM,CAAC;YACL,KAAK,EAAE,IAAI,CAAC,IAAI;YAChB,IAAI,EAAE,IAAI,CAAC,OAAO;YAClB,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;YAChC,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,KAAK,EAAE,IAAI,CAAC,YAAY;YACxB,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW;YACjC,MAAM,EAAE,UAAU;SACnB,CAAC;IACJ,CAAC;IA7CH;QAAC,iBAAU,EAAE;;qBAAA;IA+Cb,oBAAC;AAAD,CAAC,AA9CD,IA8CC;AA9CY,qBAAa,gBA8CzB,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, Observer } from 'rxjs/Rx';\n\nimport { HatApiService } from './hat-api.service';\nimport { Post } from '../shared/index';\nimport * as moment from 'moment';\n\n@Injectable()\nexport class SocialService {\n  private socialFeed$: Observable<any>;\n  private socialObserver: Observer<any>;\n  private store: { posts: Array<Post> };\n\n  constructor(private hat: HatApiService) {\n    this.store = { posts: [] };\n    this.socialFeed$ = new Observable(observer => this.socialObserver = observer).share();\n  }\n\n  showAll(): Observable<any> {\n    if (this.store.posts.length > 0) {\n      console.log('Inside social if');\n      return Observable.of(this.store.posts);\n    }\n\n    this.loadAll().subscribe(\n      data => {\n        this.store.posts = data;\n        this.socialObserver.next(this.store.posts);\n      },\n      err => console.log(`Posts table could not be found.`)\n    );\n    return this.socialFeed$;\n  }\n\n  loadAll(): Observable<Array<Post>> {\n    return this.loadFrom('facebook').map(posts => posts.map(this.fbMap));\n  }\n\n  loadFrom(source: string): Observable<any> {\n    return this.hat.getAllValuesOf('posts', source);\n  }\n\n  fbMap(post: any): Post {\n    return {\n      title: post.name,\n      body: post.message,\n      start: moment(post.created_time),\n      type: post.type,\n      image: post.full_picture,\n      privacy: post.privacy.description,\n      source: 'facebook'\n    };\n  }\n\n}\n"]}